<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Aiar's Site</title><link>https://aiar.site/tags/linux/</link><description>Recent content in Linux on Aiar's Site</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 11 Jan 2024 10:29:00 +0800</lastBuildDate><atom:link href="https://aiar.site/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Kafka 启用用户鉴权功能</title><link>https://aiar.site/post/90ecbc6e08ef41d184ee330d4e7f0b7b/</link><pubDate>Thu, 11 Jan 2024 10:29:00 +0800</pubDate><guid>https://aiar.site/post/90ecbc6e08ef41d184ee330d4e7f0b7b/</guid><description>&lt;img src="https://s11.ax1x.com/2024/01/11/pF9gP1K.jpg" alt="Featured image of post Kafka 启用用户鉴权功能" />&lt;h2 id="目标">目标&lt;/h2>
&lt;p>将使用 &lt;a class="link" href="https://kafka.apache.org/documentation/#security_sasl_scram" target="_blank" rel="noopener"
>SASL/SCRAM&lt;/a> 认证管理协议进行用户管理，密码采用 &lt;code>SCRAM-SHA-256&lt;/code> 作加密处理。&lt;a class="link" href="https://www.orchome.com/1946" target="_blank" rel="noopener"
>中文文档&lt;/a>&lt;/p>
&lt;p>通过 &lt;a class="link" href="https://kafka.apache.org/documentation/#security_authz" target="_blank" rel="noopener"
>ACLs&lt;/a> 进行用户权限管理。&lt;/p>
&lt;h2 id="operation">Operation&lt;/h2>
&lt;h3 id="backup-config">Backup Config&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> &lt;span class="o">[&lt;/span>KAFKA_HOME&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cp -R config config_bak
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="start-zookeeper--kafka-if-no-start">Start Zookeeper &amp;amp; Kafka If No Start&lt;/h3>
&lt;p>&lt;code>-daemon&lt;/code> 为后台守护启动&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ./bin/zookeeper-server-start.sh -daemon ./config/zookeeper.properties
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./bin/kafka-server-start.sh -daemon ./config/server.properties
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="add-users">Add Users&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --add-config &lt;span class="s1">&amp;#39;SCRAM-SHA-256=[password=xG0^qO5&amp;amp;]&amp;#39;&lt;/span> --entity-type users --entity-name admin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ bin/kafka-configs.sh --bootstrap-server localhost:9092 --alter --add-config &lt;span class="s1">&amp;#39;SCRAM-SHA-256=[iterations=8192,password=hL7!rV4^]&amp;#39;&lt;/span> --entity-type users --entity-name thtf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ bin/kafka-configs.sh --bootstrap-server localhost:9092 --describe --entity-type users
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configuring-kafka-brokers">Configuring Kafka Brokers&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">// kafka-admin-jaas.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">KafkaServer {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> org.apache.kafka.common.security.scram.ScramLoginModule required
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username=&amp;#34;admin&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password=&amp;#34;123456&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">KafkaClient {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> org.apache.kafka.common.security.scram.ScramLoginModule required
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> username=&amp;#34;admin&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> password=&amp;#34;123456&amp;#34;;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configure-kafka-server-sasl-properties">Configure Kafka Server SASL Properties&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ vi config/server.properties
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># config/server.properties&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">listeners&lt;/span>&lt;span class="o">=&lt;/span>SASL_PLAINTEXT://0.0.0.0:9092
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">advertised.listeners&lt;span class="o">=&lt;/span>SASL_PLAINTEXT://192.168.1.237:9092
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">security.inter.broker.protocol&lt;span class="o">=&lt;/span>SASL_PLAINTEXT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sasl.mechanism.inter.broker.protocol&lt;span class="o">=&lt;/span>SCRAM-SHA-256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sasl.enabled.mechanisms&lt;span class="o">=&lt;/span>SCRAM-SHA-256
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">authorizer.class.name&lt;span class="o">=&lt;/span>kafka.security.authorizer.AclAuthorizer
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">super.users&lt;span class="o">=&lt;/span>User:admin
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configure-kafka-client-sasl-properties">Configure Kafka Client SASL Properties&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ vi config/sasl.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># config/sasl.conf&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">security.protocol&lt;span class="o">=&lt;/span>SASL_PLAINTEXT
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sasl.mechanism&lt;span class="o">=&lt;/span>SCRAM-SHA-256
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="optional-create-start-shell-for-kafka-service-with-jaas">[Optional] Create Start Shell for Kafka Service with JAAS&lt;/h3>
&lt;p>** this way is the same as using .env and original start shell**&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ cp ./bin/kafka-server-start.sh ./bin/kafka-jaas-server-start.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ vim ./bin/kafka-jaas-server-start.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ./bin/kafka-jaas-server-start.sh&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># to the end of file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">JAAS_CONF&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-Djava.security.auth.login.config=&lt;/span>&lt;span class="nv">$base_dir&lt;/span>&lt;span class="s2">/../config/kafka-admin-jaas.conf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exec&lt;/span> &lt;span class="nv">$base_dir&lt;/span>/kafka-run-class.sh &lt;span class="nv">$EXTRA_ARGS&lt;/span> &lt;span class="nv">$JAAS_CONF&lt;/span> kafka.Kafka &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="control-kafka_opts-by-env">Control KAFKA_OPTS by .env&lt;/h3>
&lt;p>**Notice: Must register KAFKA_OPTS param like below to ENVIRONMENT if you want to use any operation in ./bin **&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># .env&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">KAFKA_OPTS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-Djava.security.auth.login.config=./config/kafka-admin-jaas.conf&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="restart-service">Restart Service&lt;/h3>
&lt;p>&lt;strong>Notice: Command order can NOT be reversed&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> &lt;span class="o">[&lt;/span>KAFKA_HOME&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./bin/kafka-server-stop.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./bin/zookeeper-server-stop.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">source&lt;/span> .env
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./bin/zookeeper-server-start.sh -daemon ./config/zookeeper.properties
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./bin/kafka-server-start.sh -daemon ./config/server.properties
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="add-acls-for-users">Add ACLs for Users&lt;/h3>
&lt;p>&lt;strong>Notice: Must set this AFTER configuring Authentication and restarting kafka service&lt;/strong>&lt;/p>
&lt;p>producer&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ bin/kafka-acls.sh --bootstrap-server localhost:9092 --command-config config/sasl.conf --add --allow-principal User:test-user --producer --topic test-topic
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>consumer&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ bin/kafka-acls.sh --bootstrap-server localhost:9092 --command-config config/sasl.conf --add --allow-principal User:test-user --consumer --topic test-topic --group test-group
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>crontab定时执行Kettle Job</title><link>https://aiar.site/post/9238c7b48c0d46679242255cb1d09f96/</link><pubDate>Thu, 11 Jan 2024 10:21:10 +0800</pubDate><guid>https://aiar.site/post/9238c7b48c0d46679242255cb1d09f96/</guid><description>&lt;img src="https://s11.ax1x.com/2024/01/09/pFp61fK.png" alt="Featured image of post crontab定时执行Kettle Job" />&lt;p>&lt;strong>注：使用 corntab 进行调度务必请将Kettle自身调度和循环关闭&lt;/strong>&lt;/p>
&lt;h2 id="1环境准备">1.环境准备&lt;/h2>
&lt;h3 id="11-检查资源库配置文件-kettlerepositoriesxml-存在性">1.1 检查资源库配置文件 &lt;code>.kettle/repositories.xml&lt;/code> 存在性&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ cat /home/etl/.kettle/repositories.xml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不存在则以 &lt;code>1.2&lt;/code> 中内容模板新建文件&lt;/p>
&lt;h3 id="12-检查资源库路径是否符合预期">1.2 检查资源库路径是否符合预期&lt;/h3>
&lt;p>将 &lt;code>&amp;lt;base_directory&amp;gt;&amp;lt;/base_directory&amp;gt;&lt;/code> 标签中的目录位置修改为期望的资源库路径&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>KettleFileRepository&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;name&amp;gt;&lt;/span>Resources&lt;span class="nt">&amp;lt;/name&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;description&amp;gt;&lt;/span>File repository-Resources&lt;span class="nt">&amp;lt;/description&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;is_default&amp;gt;&lt;/span>true&lt;span class="nt">&amp;lt;/is_default&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;base_directory&amp;gt;&lt;/span>/home/etl/data-integration/Resources&lt;span class="nt">&amp;lt;/base_directory&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;read_only&amp;gt;&lt;/span>N&lt;span class="nt">&amp;lt;/read_only&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;hides_hidden_files&amp;gt;&lt;/span>N&lt;span class="nt">&amp;lt;/hides_hidden_files&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;/repository&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/repositories&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="13-上传文件到服务器资源库">1.3 上传文件到服务器资源库&lt;/h3>
&lt;p>将配置好的作业和转换xml文件上传至服务器资源库，例如使用 &lt;code>xftp&lt;/code> 等工具&lt;/p>
&lt;h2 id="2调试配置调度">2.调试配置调度&lt;/h2>
&lt;h3 id="21-测试单次调用">2.1 测试单次调用&lt;/h3>
&lt;p>使用 &lt;code>curl&lt;/code> 工具通过Kettle自带接口触发作业单次执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ curl -u &lt;span class="o">{&lt;/span>用户名&lt;span class="o">}&lt;/span>:&lt;span class="o">{&lt;/span>密码&lt;span class="o">}&lt;/span> &lt;span class="s2">&amp;#34;http://{ip}:{port}/kettle/executeJob/?rep={资源库名称}&amp;amp;job={作业名称}&amp;#34;&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明：&lt;/p>
&lt;ol>
&lt;li>用户名和密码是Kettle子服务器的密码&lt;/li>
&lt;li>&lt;code>{}&lt;/code> 代表替换参数，url中有 &lt;code>&amp;amp;&lt;/code> 所以整体需要加上 &lt;code>&amp;quot;&amp;quot;&lt;/code>&lt;/li>
&lt;li>Kettle自带接口的触发机制不在本文讨论范围，只需要知道可以以get请求固定格式url即可执行指定作业就好了&lt;/li>
&lt;/ol>
&lt;p>实例：触发执行本机Resources资源库的0494J作业&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ curl -u cluster:cluster &lt;span class="s2">&amp;#34;http://127.0.0.1:8080/kettle/executeJob/?rep=Resources&amp;amp;job=0494J&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank" rel="noopener"
>这里&lt;/a>是curl的用法指南。&lt;/p>
&lt;p>通了会显示如下信息，异常则会显示相应异常信息:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;webresult&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;result&amp;gt;&lt;/span>OK&lt;span class="nt">&amp;lt;/result&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;message&amp;gt;&lt;/span>Job started&lt;span class="nt">&amp;lt;/message&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nt">&amp;lt;id&amp;gt;&lt;/span>d996f743-bc27-46da-862b-6ea8be6cf4d2&lt;span class="nt">&amp;lt;/id&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">&amp;lt;/webresult&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22-配置循环调度">2.2 配置循环调度&lt;/h3>
&lt;p>使用 &lt;code>crontab&lt;/code> 工具实现循环调度。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ crontab -l &lt;span class="c1"># 显示当前用户所有cron任务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ crontab -e &lt;span class="c1"># 编辑修改增删cron任务，编辑器走VISUAL或EDITOR环境变量，可通过 `echo $EDITOR` 命令查看&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tail -f /var/log/cron &lt;span class="c1"># 查看cron任务执行日志&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实例：创建一个每5分钟执行一次的调度任务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ crontab -e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*/5 * * * * /usr/bin/curl -u cluster:cluster &lt;span class="s2">&amp;#34;http://127.0.0.1:8080/kettle/executeJob/?rep=Resources&amp;amp;job=0494J&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a class="link" href="https://crontab.guru/" target="_blank" rel="noopener"
>这里&lt;/a>是crontab的用法指南。
&lt;a class="link" href="https://cloud.tencent.com/developer/article/1951645" target="_blank" rel="noopener"
>这里&lt;/a>是vim的用法指南。&lt;/p></description></item><item><title>在Linux中离线编译安装Python</title><link>https://aiar.site/post/0820636dfb6845c58164439d206e9baf/</link><pubDate>Thu, 11 Jan 2024 10:07:40 +0800</pubDate><guid>https://aiar.site/post/0820636dfb6845c58164439d206e9baf/</guid><description>&lt;img src="https://s11.ax1x.com/2024/01/08/pFShAdH.png" alt="Featured image of post 在Linux中离线编译安装Python" />&lt;h2 id="概述">概述&lt;/h2>
&lt;p>最近在将 Python3.6 升级为 Python3.9，记录下过程。
由于服务器环境均无法连接互联网，故采用从可联网机器上下载安装包再上传至服务器离线编译安装的方式。&lt;/p>
&lt;p>本文默认没有专职服务器运维人员，个人拥有服务器所有权限。（有专业人员哪还用得着自己装。。ORZ）&lt;/p>
&lt;p>下文在 &lt;code>CentOS 7.8&lt;/code> 中实测成功。&lt;/p>
&lt;h2 id="依赖">依赖&lt;/h2>
&lt;p>在安装 Python 时，程序会依赖一些系统程序。为了能正确安装，需要提前将这些依赖装好。&lt;/p>
&lt;p>可以在 &lt;a class="link" href="https://pkgs.org/" target="_blank" rel="noopener"
>这里&lt;/a> 按照系统版本和所需包搜索下载。&lt;/p>
&lt;p>ps: 说实话，其实装的时候还是有点慌的&lt;/p>
&lt;p>&lt;em>以 CentOS 7.8 为例，其他系统版本需编译试错、搜索&lt;/em>
&lt;strong>编译工具&lt;/strong> (使用的是系统自带的)&lt;/p>
&lt;ol>
&lt;li>gcc == 4.8.5&lt;/li>
&lt;li>make == 3.82&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>系统依赖&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>zlib-devel # 影响 zlib 包的安装&lt;/li>
&lt;li>libffi-devel # 忘了影响啥，装就对了&lt;/li>
&lt;li>openssl-devel # 影响 _ssl 包的安装，如果装了这个还是无法正确安装，则可以看 &lt;a class="link" href="#%e9%99%84%e5%bd%95" >后文附录部分&lt;/a>&lt;/li>
&lt;li>bzip2-devel # 影响 _bz2 包的安装&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">The necessary bits to build these optional modules were not found:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_bz2 _curses _curses_panel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_dbm _gdbm _hashlib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_lzma _sqlite3 _ssl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_tkinter _uuid readline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zlib
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_ctypes - libffi-devel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_bz2 - bzip2-devel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_uuid - uuid-devel/libuuid-devel 前者好像和gdbm-devel有冲突
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_lzma - xz-devel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_dbm - gdbm-devel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zlib - zlib-devel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">readline - readline-devel
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_hashlib - openssl11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_ssl - openssl11
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="下载">下载&lt;/h2>
&lt;p>Python官方下载地址：&lt;a class="link" href="https://www.python.org/downloads/" target="_blank" rel="noopener"
>https://www.python.org/downloads/&lt;/a>&lt;br>
Python官方 ftp 下载地址：&lt;a class="link" href="https://www.python.org/ftp/python/" target="_blank" rel="noopener"
>https://www.python.org/ftp/python/&lt;/a>&lt;/p>
&lt;p>可以按需下载相应的 Python 版本，由于是要在 Linux 中编译安装，所以我们需要下载 &lt;code>Gzipped source tarball&lt;/code> 或者 &lt;code>XZ compressed source tarball&lt;/code>，前者是 &lt;code>.tgz&lt;/code> 格式，后者是 &lt;code>.tar.xz&lt;/code>，正确解压后的结果无本质区别。&lt;/p>
&lt;p>每个大版本中较新的版本建议从 ftp 中下载，downloads 中不是很全。&lt;/p>
&lt;p>需要注意的是，Python 的同一个大版本在绝大多数情况下对于第三方包来说区别不大，
即 &lt;code>Python 3.9.*&lt;/code> 中所有的版本，绝大部分情况都可以通用，差别细节详见官网版本介绍。&lt;/p>
&lt;h2 id="解压">解压&lt;/h2>
&lt;p>下载之后我们就会得到一个类似 &lt;code>Python-3.9.13.tgz&lt;/code> 这样的文件，将其上传到服务器之后，随便在一个地方进行解压即可，这个文件可以理解为一个安装包，具体安装到哪里需要后续配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> /path/to/xxx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ tar -xvf Python-3.9.13.tgz
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置">配置&lt;/h2>
&lt;p>然后进入到解压出的文件夹中，开始配置安装规则。&lt;/p>
&lt;p>常用的参数就是 &lt;code>--prefix&lt;/code> 这个参数，它决定了Python将被安装在哪里。
如果不填，将会默认安装到 &lt;code>/usr/local/python&lt;/code> 中，如此则后面的编译安装命令需要root权限，但一般 &lt;strong>不建议&lt;/strong> 这样，因为如此可能会导致将操作系统之前已有的 Python 强制覆盖，引发一系列不可控的问题。&lt;/p>
&lt;p>该示例如果完成安装，则 Python 命令的可执行文件位置是 &lt;code>/home/app/depends/python/py39/bin/python3.9&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> Python-3.9.13/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ./configure --prefix&lt;span class="o">=&lt;/span>/home/app/depends/python/py39
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置成功后，可能会有类似下文这样的建议，但笔者亲测，当 gcc 版本比较低时(比如本例中的4.8.5)，使用该建议无法编译成功。所以建议低版本的 gcc 不要使用 &lt;code>--enable-optimizations&lt;/code> 参数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">If you want a release build with all stable optimizations active (PGO, etc),
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">please run ./configure --enable-optimizations
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="编译">编译&lt;/h2>
&lt;p>配置如果没有问题，就可以开始编译了，如果安装到了系统目录下则需要root权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ make
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果依赖没有安装，或者遗漏，那么配置、编译这两步可能需要反复几次。
判断自己需要的内置包能不能正常安装，就需要看 make 的执行结果，最后下面一块的内容会有类似下面这样的输出。如果其中没有 &lt;code>Failed&lt;/code> 或者 &lt;code>error&lt;/code> 等关键词出现，并且 &lt;code>necessary&lt;/code> 中缺少的包你未来也用不到，那么恭喜你可以进行下一步 &lt;strong>安装&lt;/strong> 了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Python build finished successfully!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The necessary bits to build these optional modules were not found:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_tkinter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">To find the necessary bits, look in setup.py in detect_modules() for the module&amp;#39;s name.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The following modules found by detect_modules() in setup.py, have been
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">built by the Makefile instead, as configured by the Setup files:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">_abc atexit pwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">time
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例中的这次编译意味着，&lt;code>_tkinter&lt;/code> 由于缺少相应的依赖，将不会被安装。搜索后得知，缺少 &lt;code>tkinter&lt;/code> 这个包，可以参照上文 &lt;a class="link" href="#%e4%be%9d%e8%b5%96" >依赖&lt;/a> 进行安装。&lt;/p>
&lt;p>具体哪些包依赖什么，可以以这样的关键词搜索: &lt;code>[系统版本] [Python版本] [缺失的包名] not found&lt;/code>，以 &lt;code>_tkinter&lt;/code> 为例，即 &lt;code>CentOS7 Python3 _tkinter not found&lt;/code>。
如果是国外或开源的操作系统(RedHat、CentOS、Arch、Ubuntu等)建议使用 Google，无法科学上网则建议使用 bing 国际版。如果是国内自主开发的系统，建议使用bing，且尽可能看官方建议。&lt;/p>
&lt;p>拒绝百度，从我做起。&lt;/p>
&lt;h2 id="安装">安装&lt;/h2>
&lt;p>一般来说，编译能过，而且不缺依赖，则安装就会比较顺。所以，请尽可能确保编译无误后，最后再执行安装。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ make install
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>没报错就算成功，如果配置时用了 &lt;code>--prefix&lt;/code> 参数指定了一个 &lt;strong>不在&lt;/strong> &lt;code>$PATH&lt;/code> 中的地址，则会有下面这样的提示。
意思是，没办法直接用 &lt;code>python&lt;/code> 命令直接执行刚刚安装好的程序。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Installing&lt;/span> &lt;span class="n">collected&lt;/span> &lt;span class="n">packages&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">setuptools&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pip&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">WARNING&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">The&lt;/span> &lt;span class="n">scripts&lt;/span> &lt;span class="n">pip3&lt;/span> &lt;span class="ow">and&lt;/span> &lt;span class="n">pip3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">9&lt;/span> &lt;span class="n">are&lt;/span> &lt;span class="n">installed&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="s1">&amp;#39;/path/to/python/bin&amp;#39;&lt;/span> &lt;span class="n">which&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="ow">not&lt;/span> &lt;span class="n">on&lt;/span> &lt;span class="n">PATH&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Consider&lt;/span> &lt;span class="n">adding&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">directory&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">PATH&lt;/span> &lt;span class="ow">or&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">you&lt;/span> &lt;span class="n">prefer&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">suppress&lt;/span> &lt;span class="n">this&lt;/span> &lt;span class="n">warning&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">use&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="n">no&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">warn&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">script&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">location&lt;/span>&lt;span class="o">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Successfully&lt;/span> &lt;span class="n">installed&lt;/span> &lt;span class="n">pip&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">22.0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">4&lt;/span> &lt;span class="n">setuptools&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mf">58.1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 PATH 命令&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要在终端直接执行 &lt;code>python&lt;/code>，这里提供两种方法来实现。&lt;/p>
&lt;ol>
&lt;li>使用软连接
可以使用软连接将刚刚安装的 Python 放到 &lt;code>$PATH&lt;/code> 中的某个路径下，类似创建了一个快捷方式。
比如，安装目录为 &lt;code>/new/path/to/python&lt;/code>，PATH 中有的路径 &lt;code>/xxx/xxx&lt;/code>&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ln -s /new/path/to/python/bin/python3.9 /xxx/xxx/python3.9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ln -s /new/path/to/python/bin/pip.9 /xxx/xxx/pip3.9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>直接将安装目录放到 PATH 中
假设默认 shell 是 bash，安装目录为 &lt;code>/new/path/to/python&lt;/code>。则修改该用户的 .bashrc 文件即可。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ vim ~/.bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">~/.bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">PATH&lt;/span>&lt;span class="o">=&lt;/span>/new/path/to/python/bin:&lt;span class="nv">$PATH&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存文件后，执行&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">source&lt;/span> ~/.bashrc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>以后该用户就可以直接使用 &lt;code>python3.9&lt;/code> 命令了。&lt;/p>
&lt;h2 id="附录">附录&lt;/h2>
&lt;p>当时的情况是，通过 &lt;code>yum&lt;/code> 安装 &lt;code>openssl-devel&lt;/code> 之后，在安装 &lt;code>Python3.9&lt;/code> 时 &lt;code>ssl&lt;/code> 模组仍无法正确安装(猜测是openssl版本过低，时间久远有点忘记细节了)，故使用编译安装的方式，重新装了一个 &lt;code>openssl-1.1.1&lt;/code>，再在编译 Python 时使用 &lt;code>--with-openssl&lt;/code> 参数，最后 ssl 成功安装。&lt;/p>
&lt;p>下为当时的操作记录.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">615 tar -zxvf openssl-1.1.1t.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">616 ll
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">617 cd openssl-1.1.1t/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">618 ll
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">619 ./Configure -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">620 ./config -h
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">625 cd /path/xxxxx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">626 mkdir openssl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">627 pwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">628 cd -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">629 ./config --prefix=/path/to/openssl --openssldir=/path/to/openssl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">630 make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">631 make install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">632 cd -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">633 ll openssl/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">634 cd -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">635 cd ..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">636 cd Python-3.9.13/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">646 ./configure --prefix=/path/to/py39 --with-openssl=/path/to/openssl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">647 make
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">648 make install
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">649 /path/to/python3.9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">650 whereis python
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">664 echo $PATH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">670 ln -s /path/to/py39/bin/python3.9 /path/in/$PATH/python3.9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">671 ln -s /path/to/py39/bin/pip3.9 /path/in/$PATH/pip3.9
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">673 python3.9
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Arch+Gnome 触摸板功能忽然不全了怎么办</title><link>https://aiar.site/post/e93e60bf2eca473da47d60de30ebcdba/</link><pubDate>Mon, 21 Feb 2022 17:22:12 +0800</pubDate><guid>https://aiar.site/post/e93e60bf2eca473da47d60de30ebcdba/</guid><description>&lt;img src="https://s11.ax1x.com/2024/01/08/pFSgY7R.jpg" alt="Featured image of post Arch+Gnome 触摸板功能忽然不全了怎么办" />&lt;blockquote>
&lt;p>万物皆有裂痕，那是光照进来的方向。&lt;/p>
&lt;/blockquote>
&lt;h2 id="问题描述">问题描述&lt;/h2>
&lt;p>某一次重启之后, 触摸板无法 tap to click, 无法触发三指四指的手势事件, 一指两指滑动功能还可以使用。&lt;/p>
&lt;p>gnome-control-center touchpad 设置消失, gnome-tweek 设置 touchpad 无效, dconf-editor 设置 touchpad 无效。&lt;/p>
&lt;p>重启之前的操作可能与触摸板相关的有:&lt;/p>
&lt;ol>
&lt;li>安装了 todesk 远程控制软件，可能会重载触摸板的配置&lt;/li>
&lt;li>sudo pacman -Syu&lt;/li>
&lt;/ol>
&lt;p>目前只想到这两个, 不过确实很久没有关机了, 大概有一周左右, 期间滚动升级了很多次, 不过都没有重启或关机&lt;/p>
&lt;h2 id="猜测原因">猜测原因&lt;/h2>
&lt;p>滚动更新可能触摸板依赖默认安装了 synatics 导致和 gnome 不兼容, &lt;a class="link" href="https://wiki.archlinux.org/title/GNOME#Mouse_and_touchpad" target="_blank" rel="noopener"
>Arch Wiki&lt;/a> 里这样写着:&lt;/p>
&lt;blockquote>
&lt;p>Note: The synaptics driver is not supported by GNOME. Instead, you should use libinput. See this &lt;a class="link" href="https://bugzilla.gnome.org/show_bug.cgi?id=764257#c12" target="_blank" rel="noopener"
>bug report&lt;/a>.&lt;/p>
&lt;/blockquote>
&lt;p>或者也可能是由于 &lt;a class="link" href="https://www.todesk.com/linux.html" target="_blank" rel="noopener"
>todesk&lt;/a> 重载触摸板配置啥的我也不太清楚&lt;/p>
&lt;h2 id="解决方案">解决方案&lt;/h2>
&lt;h3 id="前置条件">前置条件&lt;/h3>
&lt;ol>
&lt;li>默认系统已经安装类似 yay 的 AUR 包管理&lt;/li>
&lt;li>默认桌面系统是Gnome, 且已可以安装插件&lt;/li>
&lt;/ol>
&lt;h3 id="具体操作">具体操作&lt;/h3>
&lt;ol>
&lt;li>remove xf86-input-synaptics package&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ sudo pacman -R xf86-input-synaptics
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>install xf86-input-libinput&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ sudo pacman -Syu xf86-input-libinput
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>reboot&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ reboot
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>重启之后大概是可以触发 touch to click 了, 如果三指手势仍无法触发, 则进行下面几步&lt;/p>
&lt;ol start="4">
&lt;li>install touchegg&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ yay -Syu touchegg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="5">
&lt;li>enable touchegg&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ sudo systemctl enable --now touchegg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="6">
&lt;li>
&lt;p>install gnome extension x11-gestures&lt;br>
安装该插件即可&lt;br>
&lt;a class="link" href="https://extensions.gnome.org/extension/4033/x11-gestures/" target="_blank" rel="noopener"
>https://extensions.gnome.org/extension/4033/x11-gestures/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一般来说装好插件就三指手势已经可以触发了, 不行的话可以重启试试看&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;p>&lt;a class="link" href="https://bbs.archlinux.org/viewtopic.php?pid=1638596#p1638596" target="_blank" rel="noopener"
>https://bbs.archlinux.org/viewtopic.php?pid=1638596#p1638596&lt;/a>&lt;br>
&lt;a class="link" href="https://itsfoss.com/three-finger-swipe-gnome/" target="_blank" rel="noopener"
>https://itsfoss.com/three-finger-swipe-gnome/&lt;/a>&lt;br>
&lt;a class="link" href="https://wiki.archlinux.org/title/GNOME#Mouse_and_touchpad" target="_blank" rel="noopener"
>https://wiki.archlinux.org/title/GNOME#Mouse_and_touchpad&lt;/a>&lt;br>
&lt;a class="link" href="https://bugzilla.gnome.org/show_bug.cgi?id=764257#c12" target="_blank" rel="noopener"
>https://bugzilla.gnome.org/show_bug.cgi?id=764257#c12&lt;/a>&lt;/p></description></item><item><title>[译] 什么是AUR，如何在Arch和Manjaro中使用AUR</title><link>https://aiar.site/post/8cf42649f267457096df789ace7e2460/</link><pubDate>Fri, 21 May 2021 09:01:54 +0800</pubDate><guid>https://aiar.site/post/8cf42649f267457096df789ace7e2460/</guid><description>&lt;img src="https://s11.ax1x.com/2024/01/08/pFSgJB9.jpg" alt="Featured image of post [译] 什么是AUR，如何在Arch和Manjaro中使用AUR" />&lt;blockquote>
&lt;p>原文: &lt;a class="link" href="https://itsfoss.com/aur-arch-linux/" target="_blank" rel="noopener"
>What is Arch User Repository (AUR)? How to Use AUR on Arch and Manjaro Linux?&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>最近更新: 2020/9/18 - &lt;a class="link" href="https://itsfoss.com/author/dimitrios/" target="_blank" rel="noopener"
>Dimitrios Savvopoulos&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>如果你用过 &lt;a class="link" href="https://www.archlinux.org/" target="_blank" rel="noopener"
>Arch Linux&lt;/a> 或者其他 &lt;a class="link" href="https://itsfoss.com/arch-based-linux-distros/" target="_blank" rel="noopener"
>基于 Arch 的 Linux 发行版&lt;/a>(比如 Manjaro)，那么可能曾遇到过 &lt;code>AUR&lt;/code> 这个术语。在你尝试安装一个软件的时候，也许有人会建议你从 &lt;code>AUR&lt;/code> 来安装它，然后你满脸问号。&lt;/p>
&lt;p>什么是 &lt;code>AUR&lt;/code>？为啥要用它？又要咋用？接下来，我将回答这些问题。&lt;/p>
&lt;p>&lt;img src="https://i1.wp.com/itsfoss.com/wp-content/uploads/2020/04/what-is-aur.png?w=800&amp;amp;ssl=1"
loading="lazy"
alt="whatisaur"
>&lt;/p>
&lt;h2 id="什么是-aur">什么是 AUR&lt;/h2>
&lt;p>&lt;code>AUR&lt;/code> 是 &lt;code>Arch User Repository&lt;/code> (Arch 用户资料库) 的缩写。这是一个
社区驱动的资料库，它专注于服务那些使用 Arch 或者 Arch-base Linux 发行版的用户。AUR 包含一个名叫 &lt;a class="link" href="https://wiki.archlinux.org/index.php/PKGBUILD" target="_blank" rel="noopener"
>PKGBULIDs&lt;/a> 的软件包说明(package descriptions)，它可以让你通过 &lt;a class="link" href="https://wiki.archlinux.org/index.php/Makepkg" target="_blank" rel="noopener"
>makepkg&lt;/a> 来编译你所需的软件包，然后使用 &lt;a class="link" href="https://wiki.archlinux.org/index.php/Pacman#Additional_commands" target="_blank" rel="noopener"
>pacman&lt;/a>(Arch Linux 的软件包管理器)来安装这个软件包。&lt;/p>
&lt;p>&lt;code>AUR&lt;/code> 的创立是为了组织和分享那些来自社区的新软件包，以便于加速受欢迎的软件包被纳入&lt;a class="link" href="https://wiki.archlinux.org/index.php/Community_repository" target="_blank" rel="noopener"
>社区资料库&lt;/a>。&lt;/p>
&lt;p>有相当一部分进入官方资料库的新软件包开始时都是来源于 AUR。在 AUR，用户可以建设他们自己的软件包建设器(package builds，PKGBUILD 和相关文件)。&lt;/p>
&lt;p>AUR 社区支持为社区中的软件包投票，如果某一个包足够受欢迎(假设它有兼容的许可证和良好的包装技术)，那么它可能可以直接进入社区资料库，这样就可以直接由 pacman 直接访问了。&lt;/p>
&lt;blockquote>
&lt;p>简而言之，AUR 就是一种特殊的软件安装途径，它允许开发人员在软件未正式纳入 Arch 资料库时，将该软件提供给 Arch Linux 用户以供安装使用。&lt;/p>
&lt;/blockquote>
&lt;h2 id="应该使用-aur-么有什么风险">应该使用 AUR 么？有什么风险？&lt;/h2>
&lt;p>使用 &lt;code>AUR&lt;/code> 就像横穿马路，如果小心谨慎，那就没什么问题。&lt;/p>
&lt;p>如果你是一个 Linux 新手，建议还是不要轻易使用 &lt;code>AUR&lt;/code>，直到你已经全面的了解了 &lt;code>Arch/Manjaro&lt;/code> 和 &lt;code>Linux&lt;/code> 的基础知识。(译者注: 个人感觉 AUR 类似 GitHub)&lt;/p>
&lt;p>的确，任何人都可以向 AUR 上传软件包，但是 &lt;a class="link" href="https://wiki.archlinux.org/index.php/Trusted_Users" target="_blank" rel="noopener"
>Trusted Users&lt;/a>(TUs) 会负责密切关注上传的内容。尽管 TUs 会对上传的文件进行质量管控，但是仍无法保证 AUR 中的软件包格式正确或者无危胁。&lt;/p>
&lt;p>在实践过程中，AUR 看起来仿佛很安全，但是理论上它是可以造成一些损害的，当然，这只会发生在你疏忽大意的时候。毕竟，从 AUR 安装软件时，机智的 Arch 使用者们应该每次都会检查 &lt;code>PKGBUILDs&lt;/code> 和 &lt;code>*.install&lt;/code> 文件。&lt;/p>
&lt;p>另外，如果 AUR 中的软件包被纳入了 core/extra/community，那么 TUs(Trusted Users)会将 AUR 中删除该包，因此它们之间不应存在命名冲突。AUR 中经常包含着开发中的软件包(cvs/svn/git/etc)，他们将会被重命名，比如 foo-git。&lt;/p>
&lt;p>对于 AUR 中的软件包，&lt;code>pacman&lt;/code> 会处理其依赖关系并检测文件冲突，因此不必担心某个包中的文件会将另外一个包的文件覆盖掉。除非你在默认情况里添加了 &lt;code>-force&lt;/code> 选项，如果你真这么做了，可能会遇到一堆比文件冲突更严重的问题。&lt;/p>
&lt;h2 id="如何使用-aur">如何使用 AUR&lt;/h2>
&lt;p>使用 AUR 最简单的方法就是通过一个 &lt;code>AUR helper&lt;/code>。大部分的 &lt;a class="link" href="https://itsfoss.com/best-aur-helpers/" target="_blank" rel="noopener"
>AUR helper&lt;/a> 是命令行工具，有些也支持 GUI 图形化操作。这种工具支持搜索和安装那些发布在 AUR 上的软件包。&lt;/p>
&lt;h3 id="在-arch-linux-上安装一个-aur-helper">在 Arch Linux 上安装一个 AUR helper&lt;/h3>
&lt;p>假设你想使用的是 &lt;a class="link" href="https://github.com/Jguer/yay" target="_blank" rel="noopener"
>Yay AUR helper&lt;/a> 这款工具。首先需要确保你的 Linux 上已经安装了 &lt;code>git&lt;/code>。然后 &lt;code>clone&lt;/code> 这个仓库，随后进入该文件夹，最后执行安装。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo pacman -S git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git clone https://aur.archlinux.org/yay.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> yay
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ makepkg -si
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完毕后，就可以像下面这样使用 &lt;code>yay&lt;/code> 命令安装软件了~&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ yay -S package_name
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，也不是说只有使用 AUR helper 才可以从 AUR 安装软件，下一部分你将看到如何不用 AUR helper 使用 AUR。&lt;/p>
&lt;h3 id="不用-aur-helper-安装-aur-软件包">不用 AUR helper 安装 AUR 软件包&lt;/h3>
&lt;p>如果你不想使用 AUR helper，你也可以自行从 AUR 安装软件包。&lt;/p>
&lt;p>建议，在 &lt;a class="link" href="https://aur.archlinux.org/" target="_blank" rel="noopener"
>AUR page&lt;/a> 中找到想安装的软件包之后，请参照该软件的 &lt;code>Licence&lt;/code>，&lt;code>Popularity&lt;/code>，&lt;code>Last Updated&lt;/code>，&lt;code>Dependencies&lt;/code> 等指标，判断其内容质量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git clone &lt;span class="o">[&lt;/span>package URL&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> &lt;span class="o">[&lt;/span>package name&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ makepkg -si
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设，你想安装 &lt;a class="link" href="https://aur.archlinux.org/packages/telegram-desktop-git" target="_blank" rel="noopener"
>telegram desktop&lt;/a> 这个软件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ git clone https://aur.archlinux.org/telegram-desktop-git.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">cd&lt;/span> telegram-desktop-git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ makepkg -si
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="在-manjaro-linux-中启用-aur-支持">在 Manjaro Linux 中启用 AUR 支持&lt;/h2>
&lt;p>Manjaro Linux 默认不启用 AUR，需要使用 &lt;code>pamac&lt;/code> 来启用这一功能，我的笔记本使用的是 &lt;a class="link" href="https://manjaro.org/" target="_blank" rel="noopener"
>Manjaro&lt;/a> Cinnamon，但下面的步骤适用于所有版本的 Manjaro。&lt;/p>
&lt;p>打开 Pamac 也就是 &lt;code>Add/Remove Software&lt;/code>：
&lt;img src="https://i1.wp.com/i.imgur.com/kFF6HtW.png?ssl=1"
loading="lazy"
alt="打开Pamac"
>&lt;/p>
&lt;p>打开 Pamac 之后，进入属性 &lt;code>Preferences&lt;/code>：
&lt;img src="https://i0.wp.com/i.imgur.com/47r963A.png?ssl=1"
loading="lazy"
alt="打开属性"
>&lt;/p>
&lt;p>打开属性对话框，进入 AUR 页签，启用 AUR 支持，启用检测更新，然后关闭对话框。&lt;/p>
&lt;p>&lt;img src="https://i1.wp.com/i.imgur.com/UThiDHO.png?ssl=1"
loading="lazy"
alt="启用AUR"
>&lt;/p>
&lt;p>现在，搜索软件的时候可以搜到源自 AUR 的软件包了，可以通过软件描述下面的标签来区分。&lt;/p>
&lt;p>&lt;img src="https://i2.wp.com/i.imgur.com/RM5BKi2.png?ssl=1"
loading="lazy"
alt="区分源自AUR的软件"
>&lt;/p>
&lt;p>AUR 是大家 &lt;a class="link" href="https://itsfoss.com/why-arch-linux/" target="_blank" rel="noopener"
>热爱 Arch Linux 的众多原因&lt;/a> 之一，你可以看到它为什么如此流行。&lt;/p>
&lt;p>希望本文对你有用。&lt;/p>
&lt;p>希望能看到各大社交媒体上即将出现的 Arch 主题~&lt;/p></description></item><item><title>[译] Fish 命令行的生产效率</title><link>https://aiar.site/post/f4273dc3df9447f2ae8f9c58d9df142e/</link><pubDate>Thu, 30 Jul 2020 09:12:49 +0800</pubDate><guid>https://aiar.site/post/f4273dc3df9447f2ae8f9c58d9df142e/</guid><description>&lt;img src="https://s11.ax1x.com/2024/01/08/pFShEod.jpg" alt="Featured image of post [译] Fish 命令行的生产效率" />&lt;p>原文链接: &lt;a class="link" href="https://dev.to/yankee/command-line-productivity-with-fish-shell-52e4" target="_blank" rel="noopener"
>Command line productivity with Fish shell&lt;/a>&lt;/p>
&lt;p>用 Fish 终端处理事务，
你将拥有不止一种解决问题的途径，
这是她的魅力所在。
无止境的定制方案和调整插件可以让事务更快速，
更高效的被处理完成。&lt;/p>
&lt;p>在使用 WSL 的时候，
我心爱的 &lt;code>zsh&lt;/code> 和 &lt;code>oh-my-zsh&lt;/code> 组合让我陷入了性能危机。
彷徨无助了一个小时后，
我迷迷糊糊的投入了 &lt;code>Fish Shell&lt;/code> 的怀抱，
听说在 WSL 中，Fish 要比 zsh 快十倍
(不是真实的比例指标，但是赶脚真的非常非常快)。
但是，Fish 也有些她自己的怪癖，后面我会介绍到。&lt;/p>
&lt;h2 id="安装-fish-shell">安装 Fish Shell&lt;/h2>
&lt;p>如果你使用的是 &lt;code>Debian-based&lt;/code> 的发行版：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ sudo apt-get install fish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你使用的是其他平台，请按照
&lt;a class="link" href="https://github.com/fish-shell/fish-shell#getting-fish" target="_blank" rel="noopener"
>这里&lt;/a>
的指示进行操作。&lt;/p>
&lt;h2 id="fish-shell-介绍">Fish Shell 介绍&lt;/h2>
&lt;p>Fish Shell 非常的轻量，反馈表现迅速，并且有着丰富的特性。
这意味着，你只需花费一点精力就能在终端中产生可观的生产效率。
主要特性功能有：&lt;/p>
&lt;ul>
&lt;li>语法高亮&lt;/li>
&lt;li>自动建议命令&lt;/li>
&lt;li>tab 补全&lt;/li>
&lt;li>方法自动导入&lt;/li>
&lt;/ul>
&lt;p>Fish 的官方文档非常丰富和详尽，在本地有一份文档的副本，
你可以通过在 Fish Shell 中键入 &lt;code>help&lt;/code> 来在浏览器打开这个文档。
对于大多数人来说，安装原生 Fish 就已经足够。
但我们也可以使用插件，主题布拉布拉来使得 Fish 更加可用，和易于调整。
和其他 Shell 类似，Fish 有着大量的插件安装框架，
而我们将使用的插件安装框架被称为 &lt;code>oh-my-fish(omf)&lt;/code>。&lt;/p>
&lt;h2 id="omf-介绍">omf 介绍&lt;/h2>
&lt;p>omf 是在 Fish Shell 之外，最上面薄薄的一个层，
因此你不必担心速度和性能的问题。可以通过一条简单的命令安装它：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ curl -L https://get.oh-my.fish &lt;span class="p">|&lt;/span> fish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完毕后，你的 Fish Shell 将获得一个 &lt;code>omf&lt;/code> 命令，
这个命令可以安装主题和其他有用的插件。omf 十分直观，
如果你曾使用过 nvm 或者 pip，你会有种似曾相识的感觉。&lt;/p>
&lt;h3 id="omf-主题">omf 主题&lt;/h3>
&lt;p>omf 有着各种各样的主题供你选择。你可以找到托管在 omf 的所有主题，
或者你可以使用 &lt;code>omf theme&lt;/code> 命令来列出所有可用主题，
已安装主题和默认主题。&lt;/p>
&lt;p>安装新主题时，当前 Fish Shell 客户端将会直接应用该主题。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ omf install &amp;lt;theme-name&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ omf install bira
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--_3T8aDWd--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2032/1%2ARFN2ONxk2-Lzn_K9uUptzg.gif"
loading="lazy"
alt="展示主题-实例"
>
&lt;em>列出主题和切换主题&lt;/em>&lt;/p>
&lt;p>如果你拥有很多主题，可以这样来在它们之间切换：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ omf theme &amp;lt;theme-name&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="omf-别名">omf 别名&lt;/h3>
&lt;p>当你需要完成一些重复的任务时，
omf 的别名功能可以让你尽可能的减少键盘敲击次数。
Fish Shell 的 &lt;code>alias&lt;/code> 命令可以用来定义操作的别名。
你可以通过命令行轻易的使用它。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> &amp;lt;alias&amp;gt; &lt;span class="s1">&amp;#39;&amp;lt;command&amp;gt;&amp;#39;&lt;/span> -s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> install &lt;span class="s1">&amp;#39;sudo apt-get install&amp;#39;&lt;/span> -s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">alias&lt;/span> remove &lt;span class="s1">&amp;#39;sudo apt-get remove --purge&amp;#39;&lt;/span> -s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>定义了以上的别名后，你就可以通过 &lt;code>install&lt;/code> 命令来安装所有的包，
或者使用 &lt;code>remove&lt;/code> 命令来完全删除某个包。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ install vim
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ remove python2.7
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--YLN2JNx---/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2032/1%2AWThV-osTr7qeVxtDH7cSiw.gif"
loading="lazy"
alt="创建别名"
>
&lt;em>创建别名install&lt;/em>&lt;/p>
&lt;p>通过 &lt;code>alias&lt;/code> 命令创建的别名可以一直保持到本次会话结束，
也就意味着，如果你打开了一个新的终端进程，之前创建的别名将不再工作。&lt;/p>
&lt;p>如果想让之前定义的别名可以在新的终端工作，我们需要使用 &lt;code>-s&lt;/code> 标记。
它将在后台使用 &lt;code>funcsave&lt;/code>。&lt;/p>
&lt;p>使用了 &lt;code>-s&lt;/code> 标记的别名定义，将被定义为永久性的别名，
本机的任何 Fish 终端都可以使用。&lt;/p>
&lt;p>当你忘记了自己定义过啥别名，
你可以使用 &lt;code>alias&lt;/code> 命令来浏览所有已定义的别名。
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--D4RMiEnz--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2032/1%2AvQumglI-6OpHawA-I5L9nA.gif"
loading="lazy"
alt="列出所有别名"
>
&lt;em>列出所有别名&lt;/em>&lt;/p>
&lt;h3 id="使用-nvm">使用 nvm&lt;/h3>
&lt;p>Fish Shell 的其中一个怪癖是，他不能像 nvm 一样运行 bash 工具。
为此，你需要一个叫做 &lt;a class="link" href="https://github.com/edc/bass" target="_blank" rel="noopener"
>bass&lt;/a>的包，
来将 nvm 暴露给 Fish Shell。&lt;/p>
&lt;p>bass 创建了一个可以支持其他 bash 工具包的框架，
比如我们稍后会使用一个叫 &lt;code>fish-nvm&lt;/code> 的工具包。
也有很多其他用于 nvm 的工具包，但是 fish-nvm 不会影响性能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ omf install bass
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ omf install https://github.com/FabioAntunes/fish-nvm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用-virtualenv">使用 virtualenv&lt;/h4>
&lt;p>这是使用 Fish Shell 的一个陷阱。当你在 Python 的虚拟环境工作时，
你 &lt;em>不能&lt;/em> 使用 下面这样普通的方式激活虚拟环境：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ python -m venv venv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">source&lt;/span> venv/bin/activate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而是要使用下面的方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">source&lt;/span> venv/bin/activate.fish
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="高效的包">高效的包&lt;/h2>
&lt;h3 id="pj">pj&lt;/h3>
&lt;p>(译者注：翻译的挺烂的，原文写的也不咋地，主要看图和gif大概就能懂)&lt;/p>
&lt;p>pj 会以一种预测的方式，在你喜欢的目录之间跳转。
告诉 pj 去哪里寻找你的项目或者文件夹，
然后他可以通过 tab 来补全。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ omf install pj
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>比如，在 &lt;code>home&lt;/code> 目录下有个 &lt;code>test&lt;/code> 文件夹，里面有一堆别的文件夹。
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--Sv_aZ2Gb--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_auto%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AWGRQj64vuEugFL_z2Ffzfw.png"
loading="lazy"
alt="hhh"
>
为了将 &lt;code>test&lt;/code> 文件夹标记为跳转目标，我们需要设置这样的项目地址：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">set&lt;/span> -Ux PROJECT_PATHS ~/test
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在，我们可以在任意位置来访问 test 内的文件夹了。
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--bSfr11nc--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2272/1%2AjI0uddiur0aJXbsjmz1y_g.gif"
loading="lazy"
alt="pj jump"
>
&lt;em>pj 的作用&lt;/em>&lt;/p>
&lt;h3 id="z">z&lt;/h3>
&lt;p>z 和 pj 有些相似，但从某种意义上来说 z 更加智能，
它会持续跟踪你最常访问的一些文件夹，因此你可以轻松的跳到这些位置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ omf install z
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>就像我说的，z 是一个智能的工具，即使我输入了错别字，
它也会从我的最常访问里努力匹配到与输入最相近的那一个。
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--sxD8x3zV--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2Ax8va4Ph_V_ADbMSre0PasA.gif"
loading="lazy"
alt="z"
>
&lt;em>z 的作用&lt;/em>&lt;/p>
&lt;h3 id="plugin-git">plugin-git&lt;/h3>
&lt;p>和 zsh 中的 git 插件类似，plugin-git 包会给予你一个标准 git 别名集合
来加速你的 git 工作流。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ omf install https://github.com/jhillyerd/plugin-git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--vSUKKMXZ--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AN9xOm9M149wtYDQdlT7B3w.gif"
loading="lazy"
alt="plugin-git 的作用"
>
&lt;em>plugin-git 的作用&lt;/em>&lt;/p>
&lt;p>不只这样，为了确保你使用正确的别名，
它也会将别名进行展开，来形成完整的命令。
这里有完整的&lt;a class="link" href="https://github.com/jhillyerd/plugin-git#usage" target="_blank" rel="noopener"
>别名列表&lt;/a>。&lt;/p>
&lt;h3 id="fzf">fzf&lt;/h3>
&lt;p>Fuzzy Finder(模糊查找) 或者 fzf 是一种更加快速的通用查找工具，
可以用它来查找文件或者命令历史。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ omf install https://github.com/jethrokuan/fzf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>搜索遍历你的命令历史记录，你可以使用 &lt;code>ctrl + r&lt;/code> 或者输入该命令的某些部分，
然后敲击 &lt;code>ctrl + r&lt;/code> 来精准查找符合条件的命令。
&lt;img src="https://res.cloudinary.com/practicaldev/image/fetch/s--zbqXU3cs--/c_limit%2Cf_auto%2Cfl_progressive%2Cq_66%2Cw_880/https://cdn-images-1.medium.com/max/2000/1%2AlOEP-GYgbG07VnTca6o18g.gif"
loading="lazy"
alt="fzf 的使用"
>
&lt;em>fzf 的使用&lt;/em>&lt;/p>
&lt;p>如果你想在当前目录下搜索文件，你可以使用 &lt;code>ctrl + o&lt;/code> 然后浏览他们。
你可以用这个工具做更多事情，点击&lt;a class="link" href="https://github.com/jethrokuan/fzf#usage" target="_blank" rel="noopener"
>这里&lt;/a>查看更多。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>我希望这篇文章能很好的指导安装 Fish 和提升工作流的效率。如果你有任何建议或问题，
下面评论就好~&lt;/p></description></item></channel></rss>